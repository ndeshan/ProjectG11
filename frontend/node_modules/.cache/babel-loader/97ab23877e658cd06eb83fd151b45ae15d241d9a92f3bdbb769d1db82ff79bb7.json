{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AdminContext=/*#__PURE__*/createContext();export const useAdmin=()=>{const context=useContext(AdminContext);if(!context){throw new Error('useAdmin must be used within AdminProvider');}return context;};export const AdminProvider=_ref=>{let{children}=_ref;const[isAdmin,setIsAdmin]=useState(false);const login=(username,password)=>{if(username==='admin'&&password==='admin'){setIsAdmin(true);localStorage.setItem('isAdmin','true');return true;}return false;};const logout=()=>{setIsAdmin(false);localStorage.removeItem('isAdmin');};// Check if admin is logged in on app start\nReact.useEffect(()=>{const adminStatus=localStorage.getItem('isAdmin');if(adminStatus==='true'){setIsAdmin(true);}},[]);return/*#__PURE__*/_jsx(AdminContext.Provider,{value:{isAdmin,login,logout},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","AdminContext","useAdmin","context","Error","AdminProvider","_ref","children","isAdmin","setIsAdmin","login","username","password","localStorage","setItem","logout","removeItem","useEffect","adminStatus","getItem","Provider","value"],"sources":["/home/nipuna/ProjectG1/frontend/src/contexts/AdminContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst AdminContext = createContext();\n\nexport const useAdmin = () => {\n  const context = useContext(AdminContext);\n  if (!context) {\n    throw new Error('useAdmin must be used within AdminProvider');\n  }\n  return context;\n};\n\nexport const AdminProvider = ({ children }) => {\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  const login = (username, password) => {\n    if (username === 'admin' && password === 'admin') {\n      setIsAdmin(true);\n      localStorage.setItem('isAdmin', 'true');\n      return true;\n    }\n    return false;\n  };\n\n  const logout = () => {\n    setIsAdmin(false);\n    localStorage.removeItem('isAdmin');\n  };\n\n  // Check if admin is logged in on app start\n  React.useEffect(() => {\n    const adminStatus = localStorage.getItem('isAdmin');\n    if (adminStatus === 'true') {\n      setIsAdmin(true);\n    }\n  }, []);\n\n  return (\n    <AdminContext.Provider value={{ isAdmin, login, logout }}>\n      {children}\n    </AdminContext.Provider>\n  );\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEnE,KAAM,CAAAC,YAAY,cAAGL,aAAa,CAAC,CAAC,CAEpC,MAAO,MAAM,CAAAM,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,OAAO,CAAGN,UAAU,CAACI,YAAY,CAAC,CACxC,GAAI,CAACE,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,4CAA4C,CAAC,CAC/D,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED,MAAO,MAAM,CAAAE,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC,KAAM,CAACE,OAAO,CAAEC,UAAU,CAAC,CAAGX,QAAQ,CAAC,KAAK,CAAC,CAE7C,KAAM,CAAAY,KAAK,CAAGA,CAACC,QAAQ,CAAEC,QAAQ,GAAK,CACpC,GAAID,QAAQ,GAAK,OAAO,EAAIC,QAAQ,GAAK,OAAO,CAAE,CAChDH,UAAU,CAAC,IAAI,CAAC,CAChBI,YAAY,CAACC,OAAO,CAAC,SAAS,CAAE,MAAM,CAAC,CACvC,MAAO,KAAI,CACb,CACA,MAAO,MAAK,CACd,CAAC,CAED,KAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CACnBN,UAAU,CAAC,KAAK,CAAC,CACjBI,YAAY,CAACG,UAAU,CAAC,SAAS,CAAC,CACpC,CAAC,CAED;AACArB,KAAK,CAACsB,SAAS,CAAC,IAAM,CACpB,KAAM,CAAAC,WAAW,CAAGL,YAAY,CAACM,OAAO,CAAC,SAAS,CAAC,CACnD,GAAID,WAAW,GAAK,MAAM,CAAE,CAC1BT,UAAU,CAAC,IAAI,CAAC,CAClB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,mBACET,IAAA,CAACC,YAAY,CAACmB,QAAQ,EAACC,KAAK,CAAE,CAAEb,OAAO,CAAEE,KAAK,CAAEK,MAAO,CAAE,CAAAR,QAAA,CACtDA,QAAQ,CACY,CAAC,CAE5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}